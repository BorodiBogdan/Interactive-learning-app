<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LessonText.Text" xml:space="preserve">
    <value>Bil Gheiț, the owner of Macrosoft Company, provides you with a matrix with n rows, numbered from 1 to n, and n columns, also numbered from 1 to n, which stores natural numbers. A path in the matrix that starts at position (1,1) and ends at position (n,n) is made up of adjacent components, two by two, on rows and columns. The cost of the path is equal to the sum of the costs of the components through which the path passes.

Task
Determine the minimum cost of a path that starts at position (1,1) and ends at position (n,n), and Mr. Bil Gheiț will immediately hire you as a stoker at his company.

Input data
For all tests, the matrix will be generated randomly. First, natural numbers n, X, Y, Z, and T are read from the keyboard, followed by exactly n natural numbers representing the first row of the matrix. The rest of the elements will be generated using the formula: a[i][j] = 1 + (a[i-1][j-1] * X + a[i-1][j] * Y + a[i-1][j+1] * Z) % T, i=2..n, j=1..n. Note that some elements in the formula can be 0, for example, when calculating the value of a[2,1] which depends on a[1, 0].

Output data
The program will display on the screen, so that Bil can see it, the minimum sum of a path from (1,1) to (n,n).

Restrictions and clarifications
1 ≤ n ≤ 1500
1 ≤ X, Y, Z, T ≤ 500
1 ≤ a[i,j] ≤ 500, for any i=1..n, j=1..n.</value>
  </data>
  <data name="Solution.Text" xml:space="preserve">
    <value>#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;queue&gt;
#define IN ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define OUT return 0;
using namespace std;

int n, X, Y, Z, T;
int M[1501][1501], A[1501][1501];
int di[] = { 1 , -1 , 0 , 0 };
int dj[] = { 0 , 0 , 1 , -1 };

struct poz {
    int i, j;
    int dist;
    bool operator &lt; (const poz&amp; c) const
    {
        return dist &gt; c.dist;
    }
};
priority_queue&lt;poz&gt; Q;

bool inside(int i, int j) { return (i &gt;= 1 &amp;&amp; j &gt;= 1 &amp;&amp; i &lt;= n &amp;&amp; j &lt;= n); }

void Read()
{
    cin &gt;&gt; n &gt;&gt; X &gt;&gt; Y &gt;&gt; Z &gt;&gt; T;

    for (int i = 1; i &lt;= n; i++)
        cin &gt;&gt; M[1][i];
}
void Fill()
{
    //a[i][j] = 1 + (a[i - 1][j - 1] * X + a[i - 1][j] * Y + a[i - 1][j + 1] * Z) % T

    for (int i = 2; i &lt;= n; i++)
        for (int j = 1; j &lt;= n; j++)
            M[i][j] = 1 + (M[i - 1][j - 1] * X + M[i - 1][j] * Y + M[i - 1][j + 1] * Z) % T,
            A[i][j] = 2000000001;

    for (int i = 1; i &lt;= n; i++)
        A[1][i] = 2000000001;
}
void Lee()
{
    int i, j, i_urmator, j_urmator;
    Q.push({ 1, 1, 0 });
    A[1][1] = M[1][1];

    while (!Q.empty())
    {
        i = Q.top().i;
        j = Q.top().j;

        for (int d = 0; d &lt; 4; d++)
        {
            i_urmator = i + di[d];
            j_urmator = j + dj[d];

            if (inside(i_urmator, j_urmator) &amp;&amp; A[i_urmator][j_urmator] &gt; M[i_urmator][j_urmator] + A[i][j])
            {
                A[i_urmator][j_urmator] = A[i][j] + M[i_urmator][j_urmator];
                Q.push({ i_urmator,j_urmator,A[i_urmator][j_urmator] });
            }
        }
        Q.pop();
    }
    cout &lt;&lt; A[n][n];
}

int main()
{
    IN

    Read();
    Fill();
    Lee();

    OUT
}</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>#include &lt;fstream&gt;
#define Nmax 1001
#include &lt;string&gt;
#include &lt;queue&gt;
using namespace std;

ifstream fin("miting.in");
ofstream fout("miting.out");

int n, m, op, oo = 1 &lt;&lt; 29;
int dp[11][11][61][61];
char M[61][61];
string S;

int di[] = { 1, -1, 0, 0 };
int dj[] = { 0, 0, 1, -1 };

struct Bob{ int i, j; };
queue &lt;Bob&gt; Q;
pair &lt;int, int&gt; P[11];

bool inside(int i, int j){ return i &lt;= n &amp;&amp; j &lt;= m &amp;&amp; i &gt;= 1 &amp;&amp; j &gt;= 1 &amp;&amp; M[i][j] != '#'; }

void Lee(int i, int j, int x, int y){
    Q.push({x, y});

    while(Q.size()){
        int ii = Q.front().i;
        int jj = Q.front().j;

        for(int d = 0; d &lt; 4; ++d){
            int inou = ii + di[d];
            int jnou = jj + dj[d];

            if(inside(inou, jnou) &amp;&amp; dp[i][j][inou][jnou] &gt; dp[i][j][ii][jj] + 1){
                dp[i][j][inou][jnou] = dp[i][j][ii][jj] + 1;
                Q.push({inou, jnou});
            }
        }
        Q.pop();
    }
}
int main() {
    fin &gt;&gt; op &gt;&gt; n &gt;&gt; m &gt;&gt; S;
    
    int isus = 0, jstanga = m, ijos = 0, jdreapta = 0;

    for(int i = 1; i  &lt;= n; ++i)
        for(int j = 1; j &lt;= m; ++j){
            fin &gt;&gt; M[i][j];

            if(M[i][j] &gt;= 'A' &amp;&amp; M[i][j] &lt;= 'Z' ){
                if( isus == 0)
                    isus = i;
                
                ijos = i;
            
                if(j &lt; jstanga)
                    jstanga = j;

                if(j &gt; jdreapta)
                    jdreapta = j;    
                
                P[S.find(M[i][j]) + 1] = { i, j};
            } 
        }
    
    if(op == 1){
        int l = ijos - isus + 1;
        int L = jdreapta - jstanga + 1;

        fout &lt;&lt; l * L;

        return 0;
    }
    int length = S.length();

    for(int i = 1; i &lt;= length; ++i)
        for(int j = 1; j &lt;= length; ++j)
            for(int x = 1; x &lt;= n; ++x)
                for(int y = 1; y &lt;= m; ++y)
                    dp[i][j][x][y] = oo;
    
    for(int i = 1; i &lt;= length; ++i){
        dp[i][i][P[i].first][P[i].second] = 0;

        Lee(i, i, P[i].first, P[i].second);
    }

    for(int l = 2; l &lt;= length; ++l)
        for(int i = 1; i &lt;= length - l + 1; ++i){
            int j = i + l - 1;

            for(int x = 1; x &lt;= n; ++x)
                for(int y = 1; y &lt;= m; ++y){
                    int lee = 0;

                    for(int k = i; k &lt; j; ++k)
                        if(dp[i][j][x][y] &gt; dp[i][k][x][y] + dp[k + 1][j][x][y])
                            dp[i][j][x][y] = dp[i][k][x][y] + dp[k + 1][j][x][y], lee = 1;

                    if(lee)
                        Lee(i, j, x, y);
                }
        }
    
    int ans = oo;

    for(int x = 1; x &lt;= n; ++x)
        for(int y = 1; y &lt;= m; ++y)
            ans = min(dp[1][length][x][y], ans);
    
    fout &lt;&lt; ans;

    return 0;
}</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>In the Quiet City, a number of k young friends want to participate in a protest rally. Because the neighborhood where they live is large, they will move to the meeting point with their personal cars. Each young person will bring with them a sign on which they have drawn a single letter from the set A...Z. There are no two signs with identical letters. The k letters form a word, which we denote as w, that is known.

The neighborhood where the young people live can be encoded by an n*m matrix of square zones, some of which are prohibited. It is known that a car consumes one unit of fuel when moving from one zone to an adjacent zone, and does not consume fuel if it is stationary. Two zones are adjacent if they have a common side. To save fuel, the young people decide that if two cars meet in a zone and all the letters in the two cars represent a sequence from the word w, then they will continue with a single car, taking all the signs with them. Otherwise, the cars will continue their journey separately.

For example, if the word w is DOWN, then the car carrying the letter D can take the young person who brings the sign with the letter O, or vice versa: the car with the letter O can take the young person who brings the letter D. Then they can continue their journey to the car carrying the letter N. In another variant, the letters S and O can first be combined into a single car if the cars that carried them meet in the same zone. However, it is not possible to transfer, or combine, the letters between the car carrying only the letter J and the one carrying only the letter S.

Request:
Knowing the dimensions of the neighborhood, n and m, the word w, the configuration of the neighborhood, and the initial positions of the young people, the following are required:

The minimum area of a submatrix of the matrix that encodes the neighborhood, in which all the initial positions of the young people are located.
The minimum number of units of fuel consumed by all the cars, knowing that in the end, all the young people will be reunited in a single car.

Input:
The input file miting.in contains:
On the first line, a natural number p, which can only have the value 1 or 2.
On the second line, two natural numbers n and m, separated by a space.
On the third line, the word w.
On the following n lines, m characters per line representing the zones of the neighborhood. A zone is prohibited if it corresponds to the character #, it is free if it corresponds to the character _ (underscore), and it is the starting point of a car if it corresponds to one of the letters of the word w.

Output:
If the value of p is 1, only requirement 1 will be solved.
In this case, in the output file miting.out, a single natural number A will be written, representing the minimum area of a submatrix of the matrix that encodes the neighborhood, in which all the initial positions of the young people are located.

If the value of p is 2, only requirement 2 will be solved.
In this case, in the output file miting.out, a single natural number C will be written, representing the minimum number of units of fuel consumed by all the cars until the young people, and therefore the letters, are reunited in a single car. If there is no solution, that is, not all young people can be reunited in a single car, -1 will be written.

Restrictions and clarifications:
2 ≤ n, m ≤ 60
2 ≤ k ≤ 10
Let z be the number of restricted areas. Then, 0 ≤ z ≤ (n * m)/3.
In each time unit, a car can either stay in place while waiting for another car or move to a neighboring zone, regardless of whether that zone is occupied by another car or not.
The length of a zone side is considered to be equal to 1.
20 points will be awarded for correctly solving the first requirement, and 80 points will be awarded for the second requirement.
For 30% of the tests for requirement 2, it is guaranteed that k ≤ 3.</value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>#include &lt;fstream&gt;
#include &lt;cstring&gt;
#include &lt;queue&gt;
#define RUP ios::sync_with_stdio(false); fin.tie(0); fout.tie(0);
#define TOT fin.close();fout.close();return 0;
using namespace std;

ifstream fin("brutar.in");
ofstream fout("brutar.out");

int n, m, nr, mini, ii, jj, p, x;
char c, d;
int M[1001][1001];
int di[6] = { 1 , -1 , 0 , 0 };
int dj[6] = { 0 , 0 , 1 , -1 };

struct bob {
    int i, j;
};
struct traseu {
    int i, j;
}T[1000001];

queue &lt; bob &gt; Q;

int inside(int i, int j) { return i &gt; 0 &amp;&amp; j &gt; 0 &amp;&amp; i &lt;= n &amp;&amp; j &lt;= m; }

void Read() {
    fin &gt;&gt; n &gt;&gt; m;

    for (int i = 1; i &lt;= n; i++)
        for (int j = 1; j &lt;= m; j++) {
            fin &gt;&gt; c;

            if (c == 'X')
                M[i][j] = -1;
        }
    for (int i = 1; i &lt;= m; i++)
        if (M[1][i] == 0) {
            Q.push({ 1 , i });
            M[1][i] = 1;
        }
    fin &gt;&gt; x &gt;&gt; d;

    if (d == 'S')
        di[4] = x;
    else
        di[4] = -x;

    fin &gt;&gt; x &gt;&gt; d;

    if (d == 'E')
        dj[4] = x;
    else
        dj[4] = -x;

    fin &gt;&gt; x &gt;&gt; d;

    if (d == 'S')
        di[5] = x;
    else
        di[5] = -x;

    fin &gt;&gt; x &gt;&gt; d;

    if (d == 'E')
        dj[5] = x;
    else
        dj[5] = -x;
}
void Lee_Pasi() {
    int i, j, i_urmator, j_urmator;

    while (Q.size()) {
        i = Q.front().i;
        j = Q.front().j;

        for (int d = 0; d &lt; 6; d++) {
            i_urmator = i + di[d];
            j_urmator = j + dj[d];

            if (inside(i_urmator, j_urmator) &amp;&amp; M[i_urmator][j_urmator] == 0) {
                Q.push({ i_urmator, j_urmator });
                M[i_urmator][j_urmator] = M[i][j] + 1;
            }
        }
        Q.pop();
    }
    mini = 2000000001;

    for (int i = 1; i &lt;= m; i++)
        if (M[n][i] &lt;= mini &amp;&amp; M[n][i] &gt; 0)
            mini = M[n][i], ii = n, jj = i;
    if (mini != 2000000001)
        fout &lt;&lt; mini &lt;&lt; "\n";
    else
        fout &lt;&lt; -1 &lt;&lt; "\n";
}
void Lee_Carare(int i, int j) {
    Q.push({ i , j });
    T[++p].i = i;
    T[p].j = j;
    int i_precedent, j_precedent;

    while (!Q.empty()) {
        i = Q.front().i;
        j = Q.front().j;

        for (int d = 0; d &lt; 6; d++) {
            i_precedent = i - di[d];
            j_precedent = j - dj[d];

            if (inside(i_precedent, j_precedent) &amp;&amp; M[i_precedent][j_precedent] + 1 == M[i][j])
            {
                Q.push({ i_precedent, j_precedent });
                T[++p].i = i_precedent;
                T[p].j = j_precedent;
                break;
            }
        }
        if (i_precedent == 1)
            break;
        Q.pop();
    }
    for (int i = p; i &gt; 0; i--)
        fout &lt;&lt; T[i].i &lt;&lt; " " &lt;&lt; T[i].j &lt;&lt; "\n";

}
int main()
{
    RUP

    Read();
    Lee_Pasi();
    if (mini != 2000000001)
        Lee_Carare(ii, jj);

    TOT
}</value>
  </data>
  <data name="richTextBox4.Text" xml:space="preserve">
    <value>Our famous baker had a very strange dream last night: he was living in a parallel universe where it's not the man who eats the bread, but the bread that eats the man... (well, maybe not that parallel after all). Thus, our baker was attacked by the bread he had just prepared (for cakes, obviously) and tried to escape. He left the bakery and found himself in front of a rectangular field, with known dimensions, which can be divided into elementary cells with a unit side (just like a matrix!). He can enter the field through any cell of the first row and must reach any cell of the last row (the bread will harden until it gets there). Some cells are inaccessible to him due to various obstacles (stones, trees, holes, etc.)

Our baker can move in 6 ways:

From the current cell to the adjacent ones (North, West, South, East)
Two special moves that can vary.
The special moves will be read from a file and a move will be coded as follows: xA yB, where x and y are nonzero natural numbers and A and B are two characters that encode the direction (A can be 'N' or 'S' for North or South, respectively, and B can be 'E' or 'W' for East or West, respectively)

For example, 5N 2W encodes the move 5 positions to the North and 2 positions to the West. (from position (x, y) it reaches position (x-5, y-2))

A special move can be made if the destination cell is not occupied by an obstacle and if it does not involve the baker leaving the matrix.

Requirement
The baker asks you to specify a route with a minimum number of cells traveled, starting from the first row and ending on the last row, in order not to be breaded (eaten by bread).

Input data
The first line of the brutar.in file will contain two natural numbers separated by a space: N and M, representing the number of rows and columns of the field. N lines of M characters 'X' and 'O' will follow, where 'X' represents an obstacle and 'O' represents a free zone.

The last two lines represent the coding of the two special moves, one move per line.

Output data
The brutar.out file will contain, on the first line, the number T of cells in a minimum length route. The following T lines will contain the description of the route, one cell per line, by its coordinates, in the order in which they were traversed.

Restrictions and clarifications
1 ≤ N, M ≤ 1,000
1 ≤ x ≤ N
1 ≤ y ≤ M
It is guaranteed that there will always be at least one path starting from the first row and reaching the last row of the matrix.
If there are multiple solutions with a minimum number of steps, any of them may be displayed.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox5.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>